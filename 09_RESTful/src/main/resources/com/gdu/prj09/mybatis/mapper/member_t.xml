<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdu.prj09.mybatis.mapper.member_t">
  
  <resultMap type="AddressDto" id="AddressMap">
    <id     column="ADDRESS_NO"     property="addressNo"/>    <!-- PK 여야함 -->
    <result column="ZONECODE"       property="zonecode"/>
    <result column="ADDRESS"        property="address"/>
    <result column="DETAIL_ADDRESS" property="detailAddress"/>
    <result column="EXTRA_ADDRESS"  property="extraAddress"/>
    <association javaType="MemberDto" property="member">
      <id     column="MEMBER_NO" property="memberNo" />
      <result column="EMAIL"     property="email"/>
      <result column="NAME"      property="name"/>
      <result column="GENDER"    property="gender"/>
    </association>
  </resultMap>
  
  <insert id="insertMember"
          parameterType="MemberDto">
    <selectKey keyProperty="memberNo" order="BEFORE" resultType="int">
      SELECT MEMBER_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>
    INSERT INTO MEMBER_T(
        MEMBER_NO
      , EMAIL
      , NAME
      , GENDER
    ) VALUES(
        #{memberNo}   <!-- keyProperty -->
      , #{email}
      , #{name}
      , #{gender}
    )
  </insert>
  
  <insert id="insertAddress"
          parameterType="AddressDto">
    INSERT INTO ADDRESS_T (
        ADDRESS_NO
      , ZONECODE
      , ADDRESS
      , DETAIL_ADDRESS
      , EXTRA_ADDRESS
      , MEMBER_NO
    ) VALUES(
        ADDRESS_SEQ.NEXTVAL
      , #{zonecode}
      , #{address}
      , #{detailAddress}
      , #{extraAddress}
      , #{member.memberNo}
    )
    <!-- 위의 #{} 변수들은 addressDto의 setter를 불러오는 것으로,
    memberNo는 없고 memberDto 타입의 member만 있음
    member 타입(setMember)의 memberNo 를 불러와야함.  -->
  </insert>
  
  <update id="updateMember"
          parameterType="Map">
    UPDATE MEMBER_T
       SET NAME = #{name}
         , GENDER = #{gender}
     WHERE MEMBER_NO = #{memberNo}
  </update>
  
  <update id="updateAddress"
          parameterType="Map">
    UPDATE ADDRESS_T
       SET ZONECODE = #{zonecode}
         , ADDRESS = #{address}
         , DETAIL_ADDRESS = #{detailAddress}
         , EXTRA_ADDRESS = #{extraAddress}
     WHERE MEMBER_NO = #{memberNo}
     <!-- Address 의 정보가 1:다 인 경우
      where member_no = #{addressNo} 로 바꿔야함 -->
  </update>
  
  <delete id="deleteMember">
    DELETE
      FROM MEMBER_T
     WHERE MEMBER_NO = #{memberNo}
  </delete>
  
  <delete id="deleteMembers">
    DELETE
      FROM MEMBER_T
     WHERE MEMBER_NO
    <foreach collection="list" item="memberNo" open="IN(" separator="," close=")">
      #{memberNo}
    </foreach>
  </delete>
  
  <select id="getTotalMemberCount"
          resultType="int">   <!-- daoImpl 에서 전달되는 파라미터가 없기 때문에 반환타입만 전달해주면 됨 -->
    SELECT COUNT(*)
      FROM MEMBER_T
  </select>
  
  <select id="getMemberList"
          parameterType="Map"
          resultMap="AddressMap">
  <!-- resultType 은 MemberDto로 만들면 안됨. 
  아래의 select 결과들이 MemberDto 에 저장이 될건데 RN + Address_T 의 칼럼들(address_no, zonecode 등등)은 MemberDto 에 저장될 수 없음
   member 내용은 AddressDto 안에 있는 MemberDto > member에 저장될 수 있도록 해줘야함. (상단에 있는 ResultMap 활용) -->
          
    <!-- SELECT RN, MEMBER_NO, EMAIL, NAME, GENDER, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.MEMBER_NO DESC) AS RN
                 , M.MEMBER_NO, M.EMAIL, M.NAME, M.GENDER
                 , A.ADDRESS_NO, A.ZONECODE, ADDRESS, A.DETAIL_ADDRESS, A.EXTRA_ADDRESS     
              FROM MEMBER_T M INNER JOIN ADDRESS_T A
                ON M.MEMBER_NO = A.MEMBER_NO)
     WHERE RN BETWEEN #{begin} AND #{end} -->
     
    <!-- SELECT MEMBER_NO, EMAIL, NAME, GENDER, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.MEMBER_NO DESC) AS RN
                 , M.MEMBER_NO, M.EMAIL, M.NAME, M.GENDER
                 , A.ADDRESS_NO, A.ZONECODE, ADDRESS, A.DETAIL_ADDRESS, A.EXTRA_ADDRESS     
              FROM MEMBER_T M INNER JOIN ADDRESS_T A
                ON M.MEMBER_NO = A.MEMBER_NO)
     WHERE RN BETWEEN #{begin} AND #{end} -->
     
     SELECT MEMBER_NO, EMAIL, NAME, GENDER, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.MEMBER_NO DESC) AS RN
                 , M.MEMBER_NO, M.EMAIL, M.NAME, M.GENDER
                 , A.ADDRESS_NO, A.ZONECODE, A.ADDRESS, A.DETAIL_ADDRESS, A.EXTRA_ADDRESS
              FROM MEMBER_T M LEFT JOIN ADDRESS_T A
                ON M.MEMBER_NO = A.MEMBER_NO)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <select id="getMemberByNo"
          resultType="MemberDto">
    SELECT MEMBER_NO, EMAIL, NAME, GENDER
      FROM MEMBER_T
     WHERE MEMBER_NO = #{memberNo}
     <!-- MEMBER_T 에서 MEMBER_NO 는 pk 라서 한개만 반환한다. -->
  </select>
  
  <select id="getTotalAddressCountByNo"
          resultType="int">
    SELECT COUNT(*)
      FROM ADDRESS_T
     WHERE MEMBER_NO = #{memberNo}
  </select>
  
  <select id="getAddressListByNo"
          parameterType="Map"
          resultType="AddressDto">
    SELECT ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY ADDRESS_NO ASC) AS RN, ADDRESS_NO, ZONECODE, ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS
              FROM ADDRESS_T
             WHERE MEMBER_NO = #{memberNo})
     WHERE RN BETWEEN #{begin} AND #{end}
     <!-- address_t 에서 member_no 는 fk 라서 여러개를 반환한다. -->
  </select>
  
</mapper>